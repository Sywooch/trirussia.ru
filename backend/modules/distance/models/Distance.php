<?php

namespace distance\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "distance".
 *
 * @property integer $id
 * @property integer $sport_id
 * @property string $label
 */
class Distance extends \yii\db\ActiveRecord
{
    protected $categoriesArray;
    public $distanceCategoriesRefs;

    public function getDistanceCategoriesRefs()
    {
        if ($this->isNewRecord) return [];
        if (!$this->distanceCategoriesRefs)
            $this->distanceCategoriesRefs = DistanceDistanceCategoryRef::findAll(['distance_id' => $this->id]);
        return $this->distanceCategoriesRefs;
    }

    public function getCategoriesArrayValues()
    {
        $categories = ArrayHelper::map(DistanceCategory::find()->all(), 'id', 'label');
        $refs = $this->getDistanceCategoriesRefs();
        $values = [];
        foreach($refs as $ref){
            $values[$ref->distance_category_id] = $categories[$ref->distance_category_id];
        }
        return $values;
    }

    public function getCategoriesArray()
    {
        if ($this->categoriesArray === null){
            $refs = $this->getDistanceCategoriesRefs();
            foreach($refs as $ref){
                $this->categoriesArray[] = $ref->distance_category_id;
            }
        }
        return is_array($this->categoriesArray) ? $this->categoriesArray : [];
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'distance';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['label'], 'string', 'max' => 255],
            [['categoriesArray'], 'safe', ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'label' => 'Название',
            'categoriesArray' => 'Категории дистанций',
        ];
    }

    public function beforeDelete()
    {
        parent::beforeDelete();
        $refs = $this->getDistanceCategoriesRefs();
        foreach($refs as $ref){
            $ref->delete();
        }
        return true; // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $refs = $this->getDistanceCategoriesRefs();
        foreach($refs as $ref){
            $ref->delete();
        }
        if (is_array($this->categoriesArray)){
            foreach($this->categoriesArray as $categoryId){
                $newRef = new DistanceDistanceCategoryRef();
                $newRef->distance_id = $this->id;
                $newRef->distance_category_id = $categoryId;
                $newRef->save();
            }
        }
        return true;
    }
}
